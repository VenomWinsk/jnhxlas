<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hxht.logprocess.logbulk.dao.UsedRuleGroupMapper">
  <resultMap id="BaseResultMap" type="com.hxht.logprocess.logbulk.model.UsedRuleGroup">
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="project_analysis_id" jdbcType="VARCHAR" property="projectAnalysisId" />
    <result column="rule_group_id" jdbcType="VARCHAR" property="ruleGroupId" />
    <result column="object_id" jdbcType="VARCHAR" property="objectId" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="code" jdbcType="VARCHAR" property="code" />
    <result column="input_path" jdbcType="VARCHAR" property="inputPath" />
    <result column="description" jdbcType="VARCHAR" property="description" />
    <result column="file_regex" jdbcType="VARCHAR" property="fileRegex" />
    <result column="file_encode" jdbcType="VARCHAR" property="fileEncode" />
    <result column="output_path" jdbcType="VARCHAR" property="outputPath" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="gmt_create" jdbcType="TIMESTAMP" property="gmtCreate" />
    <result column="gmt_modified" jdbcType="TIMESTAMP" property="gmtModified" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, project_analysis_id, rule_group_id,object_id, name, code, input_path, description, file_regex,file_encode,
    output_path, status, gmt_create, gmt_modified
  </sql>
  <select id="selectByExample" parameterType="com.hxht.logprocess.logbulk.model.UsedRuleGroupExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from used_rule_group
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from used_rule_group
    where id = #{id,jdbcType=VARCHAR}
  </select>


  <select id="selectByUsedRuleGroupId"  parameterType="java.lang.String" resultMap="BaseResultMap">
    select * from used_rule_group where object_id =#{objectId}
  </select>


  <select id="selectByProjectAnalysisId"  parameterType="java.lang.String" resultMap="BaseResultMap">
    select * from used_rule_group where project_analysis_id =#{projectAnalysisId}
  </select>


  <select id="selectByProject" parameterType="java.lang.String" resultMap="BaseResultMap">
    SELECT
      *
    FROM
      used_rule_group
        LEFT JOIN project_analysis_mapper ON used_rule_group.project_analysis_id = project_analysis_mapper.id
    WHERE
        project_analysis_mapper.project_id = #{prjectId}
  </select>
  <select id="selectByUsedRuleGroupIdAndDirName" parameterType="java.lang.String" resultType="java.lang.String">
    SELECT
    id
    FROM dir_records
    WHERE used_rule_group_id = #{useGroupRuleId} and dirname = #{dirName}
  </select>


  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from used_rule_group
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.hxht.logprocess.logbulk.model.UsedRuleGroupExample">
    delete from used_rule_group
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.hxht.logprocess.logbulk.model.UsedRuleGroup">
    insert into used_rule_group (id, project_analysis_id, rule_group_id, 
      name, code, input_path, 
      description, file_regex, output_path, 
      status, gmt_create, gmt_modified
      )
    values (#{id,jdbcType=VARCHAR}, #{projectAnalysisId,jdbcType=VARCHAR}, #{ruleGroupId,jdbcType=VARCHAR}, 
      #{name,jdbcType=VARCHAR}, #{code,jdbcType=VARCHAR}, #{inputPath,jdbcType=VARCHAR}, 
      #{description,jdbcType=VARCHAR}, #{fileRegex,jdbcType=VARCHAR}, #{outputPath,jdbcType=VARCHAR}, 
      #{status,jdbcType=INTEGER}, #{gmtCreate,jdbcType=TIMESTAMP}, #{gmtModified,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.hxht.logprocess.logbulk.model.UsedRuleGroup">
    insert into used_rule_group
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="projectAnalysisId != null">
        project_analysis_id,
      </if>
      <if test="ruleGroupId != null">
        rule_group_id,
      </if>
      <if test="objectId != null">
        object_id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="code != null">
        code,
      </if>
      <if test="inputPath != null">
        input_path,
      </if>
      <if test="description != null">
        description,
      </if>
      <if test="fileRegex != null">
        file_regex,
      </if>
      <if test="fileEncode != null">
        file_encode,
      </if>
      <if test="outputPath != null">
        output_path,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="gmtCreate != null">
        gmt_create,
      </if>
      <if test="gmtModified != null">
        gmt_modified,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="projectAnalysisId != null">
        #{projectAnalysisId,jdbcType=VARCHAR},
      </if>
      <if test="ruleGroupId != null">
        #{ruleGroupId,jdbcType=VARCHAR},
      </if>
      <if test="objectId != null">
        #{objectId,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="code != null">
        #{code,jdbcType=VARCHAR},
      </if>
      <if test="inputPath != null">
        #{inputPath,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="fileRegex != null">
        #{fileRegex,jdbcType=VARCHAR},
      </if>
      <if test="fileEncode != null">
        #{fileEncode,jdbcType=VARCHAR},
      </if>
      <if test="outputPath != null">
        #{outputPath,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="gmtCreate != null">
        #{gmtCreate,jdbcType=TIMESTAMP},
      </if>
      <if test="gmtModified != null">
        #{gmtModified,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.hxht.logprocess.logbulk.model.UsedRuleGroupExample" resultType="java.lang.Long">
    select count(*) from used_rule_group
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update used_rule_group
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=VARCHAR},
      </if>
      <if test="record.projectAnalysisId != null">
        project_analysis_id = #{record.projectAnalysisId,jdbcType=VARCHAR},
      </if>
      <if test="record.ruleGroupId != null">
        rule_group_id = #{record.ruleGroupId,jdbcType=VARCHAR},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.code != null">
        code = #{record.code,jdbcType=VARCHAR},
      </if>
      <if test="record.inputPath != null">
        input_path = #{record.inputPath,jdbcType=VARCHAR},
      </if>
      <if test="record.description != null">
        description = #{record.description,jdbcType=VARCHAR},
      </if>
      <if test="record.fileRegex != null">
        file_regex = #{record.fileRegex,jdbcType=VARCHAR},
      </if>
      <if test="record.outputPath != null">
        output_path = #{record.outputPath,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.gmtCreate != null">
        gmt_create = #{record.gmtCreate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.gmtModified != null">
        gmt_modified = #{record.gmtModified,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update used_rule_group
    set id = #{record.id,jdbcType=VARCHAR},
      project_analysis_id = #{record.projectAnalysisId,jdbcType=VARCHAR},
      rule_group_id = #{record.ruleGroupId,jdbcType=VARCHAR},
      name = #{record.name,jdbcType=VARCHAR},
      code = #{record.code,jdbcType=VARCHAR},
      input_path = #{record.inputPath,jdbcType=VARCHAR},
      description = #{record.description,jdbcType=VARCHAR},
      file_regex = #{record.fileRegex,jdbcType=VARCHAR},
      output_path = #{record.outputPath,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=INTEGER},
      gmt_create = #{record.gmtCreate,jdbcType=TIMESTAMP},
      gmt_modified = #{record.gmtModified,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.hxht.logprocess.logbulk.model.UsedRuleGroup">
    update used_rule_group
    <set>
      <if test="projectAnalysisId != null">
        project_analysis_id = #{projectAnalysisId,jdbcType=VARCHAR},
      </if>
      <if test="ruleGroupId != null">
        rule_group_id = #{ruleGroupId,jdbcType=VARCHAR},
      </if>
      <if test="objectId != null">
        object_id = #{objectId,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="code != null">
        code = #{code,jdbcType=VARCHAR},
      </if>
      <if test="inputPath != null">
        input_path = #{inputPath,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        description = #{description,jdbcType=VARCHAR},
      </if>
      <if test="fileRegex != null">
        file_regex = #{fileRegex,jdbcType=VARCHAR},
      </if>
      <if test="fileEncode != null">
        file_encode = #{fileEncode,jdbcType=VARCHAR},
      </if>
      <if test="outputPath != null">
        output_path = #{outputPath,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="gmtCreate != null">
        gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
      </if>
      <if test="gmtModified != null">
        gmt_modified = #{gmtModified,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hxht.logprocess.logbulk.model.UsedRuleGroup">
    update used_rule_group
    set project_analysis_id = #{projectAnalysisId,jdbcType=VARCHAR},
      rule_group_id = #{ruleGroupId,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      code = #{code,jdbcType=VARCHAR},
      input_path = #{inputPath,jdbcType=VARCHAR},
      description = #{description,jdbcType=VARCHAR},
      file_regex = #{fileRegex,jdbcType=VARCHAR},
      output_path = #{outputPath,jdbcType=VARCHAR},
      status = #{status,jdbcType=INTEGER},
      gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
      gmt_modified = #{gmtModified,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=VARCHAR}
  </update>



  <!--<update id="updateStatus" parameterType="com.hxht.logprocess.logbulk.model.UsedRuleGroup">-->
    <!--update used_rule_group-->
    <!--<set>-->
      <!--<if test="status != null">-->
        <!--status = #{status,jdbcType=INTEGER},-->
      <!--</if>-->
    <!--</set>-->
    <!--where id = #{id,jdbcType=VARCHAR}-->
  <!--</update>-->

</mapper>
