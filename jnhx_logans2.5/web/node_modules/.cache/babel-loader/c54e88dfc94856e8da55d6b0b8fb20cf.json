{"remainingRequest":"/home/hx_ygg/job/hx_logana3.0/web/node_modules/babel-loader/lib/index.js!/home/hx_ygg/job/hx_logana3.0/web/node_modules/eslint-loader/index.js??ref--13-0!/home/hx_ygg/job/hx_logana3.0/web/src/mock/index.js","dependencies":[{"path":"/home/hx_ygg/job/hx_logana3.0/web/src/mock/index.js","mtime":1631238422177},{"path":"/home/hx_ygg/job/hx_logana3.0/web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hx_ygg/job/hx_logana3.0/web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/hx_ygg/job/hx_logana3.0/web/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyLmpzIjsKaW1wb3J0IE1vY2sgZnJvbSAnbW9ja2pzJzsKaW1wb3J0IHsgdXNlckluZm8gfSBmcm9tICcuL3VzZXIvdXNlcic7CmltcG9ydCB7IGZpZWxkVHJlZSwgZmllbGQsIGZpZWxkQnlUeXBlMCwgZmllbGRCeVR5cGUxLCBmaWVsZEJ5VHlwZTIgfSBmcm9tICcuL2ZpZWxkL2ZpZWxkJzsKaW1wb3J0IHsgbG9nIH0gZnJvbSAnLi9sb2cvbG9nJzsKaW1wb3J0IHsgZXhwb3J0VGFzaywgcHJvY2Vzc0RhdGEgfSBmcm9tICcuL3Byb2Nlc3MvcHJvY2Vzcyc7CmltcG9ydCB7IGFvLCBpbkZ1bmMsIHJlZ3VsYXIsIHJnLCBydWxlLCB0cmVlSnNvbiB9IGZyb20gJy4vb3BlcmF0aW9uL29wZXJhdGlvbic7CmltcG9ydCB7IHVuaXQgfSBmcm9tICcuL3NldHRpbmcvc2V0dGluZyc7Ck1vY2subW9jaygnL2FwaS91c2VyL3VzZXJJbmZvJywgJ3Bvc3QnLCB7CiAgY29kZTogMTAwMCwKICBkYXRhOiB1c2VySW5mbwp9KTsKTW9jay5tb2NrKCcvZmllbGQvZmllbGRUcmVlJywgJ3Bvc3QnLCB7CiAgY29kZTogMTAwMCwKICBkYXRhOiBmaWVsZFRyZWUKfSk7IC8vIE1vY2subW9jaygnL2ZpZWxkL2ZpZWxkcycsICdnZXQnLCBmaWVsZCk7CgpNb2NrLm1vY2soJy9sb2cvZ2V0TG9ncycsICdnZXQnLCBsb2cpOyAvLyBNb2NrLm1vY2soJy9wcm9jZXNzL2dldFByb2Nlc3MnLCAnZ2V0JywgcHJvY2Vzc0RhdGEpOwoKTW9jay5tb2NrKCcvcHJvY2Vzcy9nZXRUYXNrJywgJ2dldCcsIGV4cG9ydFRhc2spOyAvLyBNb2NrLm1vY2soJy9hcGkvb3BlcmF0aW9uL2Jhc2ljcmVnZXgnLCAnZ2V0JywgcmVndWxhcik7Ci8vIE1vY2subW9jaygnL29wZXJhdGlvbi9pbkZ1bicsICdnZXQnLCBpbkZ1bmMpOwovLyBNb2NrLm1vY2soJy9hcGkvb3BlcmF0aW9uL2FuYWx5c2UvJywgJ2dldCcsIHRyZWVKc29uKTsKCk1vY2subW9jaygnL29wZXJhdGlvbi9maWVsZC8wJywgJ2dldCcsIGZpZWxkQnlUeXBlMCk7Ck1vY2subW9jaygnL29wZXJhdGlvbi9maWVsZC8xJywgJ2dldCcsIGZpZWxkQnlUeXBlMSk7Ck1vY2subW9jaygnL29wZXJhdGlvbi9maWVsZC8yJywgJ2dldCcsIGZpZWxkQnlUeXBlMik7Ck1vY2subW9jaygnL29wZXJhdGlvbi9ncm9rZVJ1bGUnLCAncG9zdCcsIGZ1bmN0aW9uIChwYXJhbXMpIHsKICB2YXIgYm9keSA9IEpTT04ucGFyc2UocGFyYW1zLmJvZHkpOwogIHZhciBub2RlSWQgPSBib2R5Lm5vZGVJZDsKICB2YXIgb3duZXJUeXBlID0gYm9keS5vd25lclR5cGU7CiAgdmFyIGRhdGE7CgogIGlmIChvd25lclR5cGUgPT09IDApIHsKICAgIGRhdGEgPSByZy5kYXRhLmZpbHRlcihmdW5jdGlvbiAobGlzdCkgewogICAgICByZXR1cm4gbGlzdC5vYmplY3RJZCA9PT0gbm9kZUlkOwogICAgfSk7CiAgfSBlbHNlIGlmIChvd25lclR5cGUgPT09IDEpIHsKICAgIGRhdGEgPSBydWxlLmRhdGEuZmlsdGVyKGZ1bmN0aW9uIChsaXN0KSB7CiAgICAgIHJldHVybiBsaXN0LnJ1bGVHcm91cElkID09PSBub2RlSWQ7CiAgICB9KTsKICB9IGVsc2UgaWYgKG93bmVyVHlwZSA9PT0gJ3Jvb3QnKSB7CiAgICBkYXRhID0gYW8uZGF0YTsKICB9CgogIHJldHVybiB7CiAgICBjb2RlOiAxMDAwLAogICAgZGF0YTogZGF0YQogIH07Cn0pOyAvLyBNb2NrLm1vY2soJy9zZXR0aW5nL3VuaXQnLCAnZ2V0JywgdW5pdCk7CgpleHBvcnQgeyBNb2NrIH07"},{"version":3,"sources":["/home/hx_ygg/job/hx_logana3.0/web/src/mock/index.js"],"names":["Mock","userInfo","fieldTree","field","fieldByType0","fieldByType1","fieldByType2","log","exportTask","processData","ao","inFunc","regular","rg","rule","treeJson","unit","mock","code","data","params","body","JSON","parse","nodeId","ownerType","filter","list","objectId","ruleGroupId"],"mappings":";AAAA,OAAOA,IAAP,MAAiB,QAAjB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SACIC,SADJ,EAEIC,KAFJ,EAGIC,YAHJ,EAIIC,YAJJ,EAKIC,YALJ,QAMO,eANP;AAOA,SAASC,GAAT,QAAoB,WAApB;AACA,SAASC,UAAT,EAAqBC,WAArB,QAAwC,mBAAxC;AACA,SAASC,EAAT,EAAaC,MAAb,EAAqBC,OAArB,EAA8BC,EAA9B,EAAkCC,IAAlC,EAAwCC,QAAxC,QAAwD,uBAAxD;AACA,SAASC,IAAT,QAAqB,mBAArB;AAEAhB,IAAI,CAACiB,IAAL,CAAU,oBAAV,EAAgC,MAAhC,EAAwC;AAAEC,EAAAA,IAAI,EAAE,IAAR;AAAcC,EAAAA,IAAI,EAAElB;AAApB,CAAxC;AACAD,IAAI,CAACiB,IAAL,CAAU,kBAAV,EAA8B,MAA9B,EAAsC;AAAEC,EAAAA,IAAI,EAAE,IAAR;AAAcC,EAAAA,IAAI,EAAEjB;AAApB,CAAtC,E,CACA;;AACAF,IAAI,CAACiB,IAAL,CAAU,cAAV,EAA0B,KAA1B,EAAiCV,GAAjC,E,CACA;;AACAP,IAAI,CAACiB,IAAL,CAAU,kBAAV,EAA8B,KAA9B,EAAqCT,UAArC,E,CACA;AACA;AACA;;AACAR,IAAI,CAACiB,IAAL,CAAU,oBAAV,EAAgC,KAAhC,EAAuCb,YAAvC;AACAJ,IAAI,CAACiB,IAAL,CAAU,oBAAV,EAAgC,KAAhC,EAAuCZ,YAAvC;AACAL,IAAI,CAACiB,IAAL,CAAU,oBAAV,EAAgC,KAAhC,EAAuCX,YAAvC;AACAN,IAAI,CAACiB,IAAL,CAAU,sBAAV,EAAkC,MAAlC,EAA0C,UAACG,MAAD,EAAY;AAClD,MAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,CAACC,IAAlB,CAAX;AACA,MAAIG,MAAM,GAAGH,IAAI,CAACG,MAAlB;AACA,MAAIC,SAAS,GAAGJ,IAAI,CAACI,SAArB;AACA,MAAIN,IAAJ;;AACA,MAAIM,SAAS,KAAK,CAAlB,EAAqB;AACjBN,IAAAA,IAAI,GAAGN,EAAE,CAACM,IAAH,CAAQO,MAAR,CAAe,UAACC,IAAD;AAAA,aAAUA,IAAI,CAACC,QAAL,KAAkBJ,MAA5B;AAAA,KAAf,CAAP;AACH,GAFD,MAEO,IAAIC,SAAS,KAAK,CAAlB,EAAqB;AACxBN,IAAAA,IAAI,GAAGL,IAAI,CAACK,IAAL,CAAUO,MAAV,CAAiB,UAACC,IAAD;AAAA,aAAUA,IAAI,CAACE,WAAL,KAAqBL,MAA/B;AAAA,KAAjB,CAAP;AACH,GAFM,MAEA,IAAIC,SAAS,KAAK,MAAlB,EAA0B;AAC7BN,IAAAA,IAAI,GAAGT,EAAE,CAACS,IAAV;AACH;;AACD,SAAO;AACHD,IAAAA,IAAI,EAAE,IADH;AAEHC,IAAAA,IAAI,EAAJA;AAFG,GAAP;AAIH,CAhBD,E,CAiBA;;AAEA,SAASnB,IAAT","sourcesContent":["import Mock from 'mockjs';\nimport { userInfo } from './user/user';\nimport {\n    fieldTree,\n    field,\n    fieldByType0,\n    fieldByType1,\n    fieldByType2,\n} from './field/field';\nimport { log } from './log/log';\nimport { exportTask, processData } from './process/process';\nimport { ao, inFunc, regular, rg, rule, treeJson } from './operation/operation';\nimport { unit } from './setting/setting';\n\nMock.mock('/api/user/userInfo', 'post', { code: 1000, data: userInfo });\nMock.mock('/field/fieldTree', 'post', { code: 1000, data: fieldTree });\n// Mock.mock('/field/fields', 'get', field);\nMock.mock('/log/getLogs', 'get', log);\n// Mock.mock('/process/getProcess', 'get', processData);\nMock.mock('/process/getTask', 'get', exportTask);\n// Mock.mock('/api/operation/basicregex', 'get', regular);\n// Mock.mock('/operation/inFun', 'get', inFunc);\n// Mock.mock('/api/operation/analyse/', 'get', treeJson);\nMock.mock('/operation/field/0', 'get', fieldByType0);\nMock.mock('/operation/field/1', 'get', fieldByType1);\nMock.mock('/operation/field/2', 'get', fieldByType2);\nMock.mock('/operation/grokeRule', 'post', (params) => {\n    let body = JSON.parse(params.body);\n    let nodeId = body.nodeId;\n    let ownerType = body.ownerType;\n    let data;\n    if (ownerType === 0) {\n        data = rg.data.filter((list) => list.objectId === nodeId);\n    } else if (ownerType === 1) {\n        data = rule.data.filter((list) => list.ruleGroupId === nodeId);\n    } else if (ownerType === 'root') {\n        data = ao.data;\n    }\n    return {\n        code: 1000,\n        data,\n    };\n});\n// Mock.mock('/setting/unit', 'get', unit);\n\nexport { Mock };\n"]}]}